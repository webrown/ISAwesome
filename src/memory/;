#ifndef CACHE_H
#define CACHE_H

#include "CacheResult.h"
#include <string>
#include <QVector>

using namespace std;

enum CacheType{
    DATA, INSTRUCTION, BOTH
};

class Cache{
  public:
    //fields
    CacheType type = BOTH;
    int indexBits;
    int logDataWordCount;
    int logAssociativity;
    double delay;
    Cache *prevCache = NULL;
    Cache *nextCache = NULL;
    QVector< QVector<int> * > *tags;
    QVector< QVector< QVector<int> * > * > *contents;
    QVector< QVector<int> * > *LRU;
    QVector< QVector<int> * > *dirty;
    QVector< QVector<int> * > *valid;

    //constructors
    Cache(int indexBits, int logDataWordCount, int logAssociativity, double delay, Cache *nextCache);
    ~Cache();
    
    //functions
    CacheResult *read(unsigned int address, unsigned int length);
    CacheResult *read(unsigned int address);
    double write(QVector<int> *value, unsigned int address);
    double write(int value, unsigned int address);
    string *save();
    void restore(string *state);
    QVector<int> *splitAddress(unsigned int address);
    int addressWay(unsigned int address);
    double fetch(unsigned int address);
    unsigned int firstInLine(unsigned int address);
    void updateLRU(unsigned int address);
    unsigned int getLRUWay(unsigned int index);
    unsigned int buildAddress(unsigned int tag, unsigned int index, unsigned int offset);
    string toTable();
    size_t maxLength(unsigned int startAddress);
};


#endif
